// L√≥gica Calculadora de Sue√±o
const boton = document.querySelector('#calcularSueno');//capturamos el boton

//Agregamos el evento click al boton
boton.addEventListener('click', () => {
    const dormir = document.querySelector("#horaDormir").value;//capturamos la hora en que nos acostamos a dormir
    const despertar = document.querySelector("#horaDespertar").value;//capturamos la hora en que nos levantamos

    //validamos que ambas horas no estan vacias
    if (!dormir || !despertar) {
        document.querySelector("#resultado").innerText = "Por favor, ingresa ambas horas.";//Agregamos el texto al div
        return;
    }

    const [hDormir, mDormir] = dormir.split(":").map((elemento)=>Number(elemento));//separamos las horas y los minutos con split y luego con map los convertimos en numero 
    const [hDespertar, mDespertar] = despertar.split(":").map((elemento)=>Number(elemento));

    const tDormir = new Date(); //creamos un nuevo objeto de fecha y hora que representa el momento actual (fecha y hora del sistema en ese instante).
                                //Por ejemplo, si hoy es 15 de mayo de 2025 a las 10:30 AM, ese Date representar√°:
                                //2025-05-15T10:30:00
    tDormir.setHours(hDormir, mDormir, 0); //modificamos solo la hora y los minutos del objeto fecha

    const tDespertar = new Date();
    tDespertar.setHours(hDespertar, mDespertar, 0);

    if (tDespertar <= tDormir) tDespertar.setDate(tDespertar.getDate() + 1);//Si la Si la hora en que me despert√© es menor (o igual) a la hora en que me dorm√≠, le sumamos un d√≠a a la hora de despertar para que los c√°lculos tengan sentido.

    const diffMs = tDespertar - tDormir; //Calcula la diferencia entre las dos fechas (en milisegundos)
                                        // Esto nos da el tiempo transcurrido entre la hora de dormir y la de despertar
    const horas = Math.floor(diffMs / (1000 * 60 * 60)); // Convierte la diferencia de milisegundos a horas
                                                      // (1000 milisegundos = 1 segundo, 60 segundos = 1 minuto, 60 minutos = 1 hora)
                                                      // Math.floor redondea hacia abajo el resultado (por ejemplo, 2.5 horas -> 2)

    const minutos = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60)); // Calcula los minutos restantes despu√©s de calcular las horas
                                                                      // El operador % obtiene el residuo de la divisi√≥n de los milisegundos
                                                                      // para obtener solo el tiempo que no complet√≥ una hora completa
                                                                      // Luego lo divide entre 1000 * 60 (milisegundos en un minuto)
                                                                      // y usa Math.floor para redondear el valor hacia abajo

    let mensaje = `Dormiste ${horas} horas y ${minutos} minutos. `;

    if (horas >= 7 && horas <= 9) {
        mensaje += "¬°Tu sue√±o fue ideal! Probablemente descansaste bien."; //a mensaje le concatenamos este texto
    } else if (horas < 5) {
        mensaje += "Dormiste muy poco. Es probable que tu sue√±o no haya sido reparador.";
    } else if (horas > 9) {
        mensaje += "Dormiste bastante. Tu cuerpo puede haber estado agotado.";
    } else {
        mensaje += "Dormiste una cantidad moderada. Podr√≠as sentirte bien o algo cansado.";
    }

    document.querySelector("#resultado").innerText = mensaje;
});

// Lista de sue√±os Array de objetos
const sue√±os = [
    { nombre: "So√±ar con Agua", descripcion: "Representa emociones y estados del alma. El tipo de agua cambia su significado.", enlace: "suenos/agua.html", emoji: "üíß" },
    { nombre: "So√±ar con Serpientes", descripcion: "Puede simbolizar traici√≥n, sabidur√≠a o transformaci√≥n personal.", enlace: "suenos/serpientes.html", emoji: "üêç" },
    { nombre: "So√±ar con Ca√≠da de Dientes", descripcion: "Se asocia con inseguridad, p√©rdida o miedo al envejecimiento.", enlace: "suenos/caida-dientes.html", emoji: "ü¶∑" },
    { nombre: "So√±ar que Vuelas", descripcion: "Simboliza libertad, √©xito o el deseo de escapar de preocupaciones.", enlace: "suenos/volar.html", emoji: "üïäÔ∏è" },
    { nombre: "So√±ar que te Pierdes", descripcion: "Representa confusi√≥n, falta de direcci√≥n o miedo a decisiones importantes.", enlace: "suenos/perderse.html", emoji: "üß≠" },
    { nombre: "So√±ar con Muerte", descripcion: "Refleja cambios profundos o transformaciones personales.", enlace: "suenos/muerte.html", emoji: "‚ö∞Ô∏è" },
    { nombre: "So√±ar con Perros", descripcion: "Simboliza lealtad, protecci√≥n o necesidades afectivas.", enlace: "suenos/perros.html", emoji: "üê∂" },
    { nombre: "So√±ar con Gatos", descripcion: "Se relaciona con la intuici√≥n, el misterio o la independencia.", enlace: "suenos/gatos.html", emoji: "üê±" },
    { nombre: "So√±ar con una Casa", descripcion: "Refleja el estado emocional o interior del so√±ador.", enlace: "suenos/casa.html", emoji: "üè†" },
    { nombre: "So√±ar con Llorar", descripcion: "Expresa liberaci√≥n emocional, tristeza o necesidad de desahogo.", enlace: "suenos/llorar.html", emoji: "üò¢" },
    { nombre: "So√±ar con Matrimonio", descripcion: "Puede indicar compromisos, uniones o decisiones importantes por tomar.", enlace: "suenos/matrimonio.html", emoji: "üíç" },
    { nombre: "So√±ar con Embarazo", descripcion: "Simboliza nuevas ideas, proyectos o cambios en desarrollo.", enlace: "suenos/embarazo.html", emoji: "ü§∞" },
    { nombre: "So√±ar con tu Ex", descripcion: "Refleja recuerdos, lecciones pasadas o emociones no resueltas.", enlace: "suenos/ex.html", emoji: "üíî" },
    { nombre: "So√±ar con un Volc√°n", descripcion: "Puede representar emociones intensas que est√°n por estallar.", enlace: "suenos/volcan.html", emoji: "üåã" },
    { nombre: "So√±ar con Caer", descripcion: "Indica p√©rdida de control, miedo al fracaso o inseguridad.", enlace: "suenos/caida.html", emoji: "ü™Ç" },
    { nombre: "So√±ar con Dinero", descripcion: "Se relaciona con autoestima, valor personal o deseos materiales.", enlace: "suenos/dinero.html", emoji: "üí∞" },
    { nombre: "So√±ar con Fuego", descripcion: "Simboliza transformaci√≥n, pasi√≥n o destrucci√≥n seg√∫n el contexto.", enlace: "suenos/fuego.html", emoji: "üî•" },
    { nombre: "So√±ar con Espejos", descripcion: "Representa la autoimagen, introspecci√≥n o necesidad de conocerse.", enlace: "suenos/espejo.html", emoji: "ü™û" },
    { nombre: "So√±ar con un Tel√©fono", descripcion: "Simboliza comunicaci√≥n, conexi√≥n o mensajes importantes.", enlace: "suenos/telefono.html", emoji: "üì±" },
    { nombre: "So√±ar con N√∫meros", descripcion: "Pueden tener significado simb√≥lico, espiritual o personal importante.", enlace: "suenos/numeros.html", emoji: "üî¢" }
];

// Variables de paginaci√≥n
const elementosPorPagina = 4; // N√∫mero de elementos (sue√±os) que se mostrar√°n por p√°gina
let paginaActual = 1; // P√°gina actual, comienza en la 1

// Funci√≥n para renderizar sue√±os en la p√°gina
const mostrarSue√±os = (suenos, pagina = 1) => {
    const contenedor = document.querySelector("#sue√±os-lista");  // Seleccionamos el contenedor donde se van a mostrar los sue√±os
    contenedor.innerHTML = "";  // Limpiamos el contenedor antes de agregar nuevos elementos (esto elimina los sue√±os previos)

    // Calculamos el rango de elementos para la p√°gina actual
    const inicio = (pagina - 1) * elementosPorPagina;  // √çndice de inicio (por ejemplo, p√°gina 2 empieza en el √≠ndice 4)
    const fin = inicio + elementosPorPagina;  // √çndice final (por ejemplo, p√°gina 2 termina en el √≠ndice 7)
    
    // Extraemos los sue√±os correspondientes a la p√°gina actual usando `slice`
    const sue√±osPagina = suenos.slice(inicio, fin);  // `sue√±os.slice` crea un nuevo array con los elementos que se deben mostrar en la p√°gina actual

    // Creamos un elemento `article` por cada sue√±o en la p√°gina
    sue√±osPagina.forEach(sueno => {
        const articulo = document.createElement("article");  // Creamos un nuevo art√≠culo para cada sue√±o
        // Asignamos el contenido HTML del art√≠culo con el nombre, emoji y descripci√≥n del sue√±o
        // Muestra el emoji y el enlace al nombre del sue√±o
        // Muestra la descripci√≥n del sue√±o
        articulo.innerHTML = `  
            <h3>${sueno.emoji} <a href="${sueno.enlace}">${sueno.nombre}</a></h3>  
            <p>${sueno.descripcion}</p>  
        `;
        contenedor.appendChild(articulo);  // Agregamos el art√≠culo al contenedor en el DOM
    });

    // Llamamos a la funci√≥n que renderiza la paginaci√≥n
    renderizarPaginacion(suenos.length, pagina);  // Le pasamos el total de sue√±os y la p√°gina actual
}

// Funci√≥n para renderizar la paginaci√≥n
const renderizarPaginacion = (totalElementos, paginaAct) => {
    const contenedor = document.querySelector("#pagination-container");  // Seleccionamos el contenedor de los botones de paginaci√≥n
    contenedor.innerHTML = "";  // Limpiamos la paginaci√≥n antes de renderizar los nuevos botones

    // Calculamos el n√∫mero total de p√°ginas necesarias para mostrar todos los elementos
    const totalPaginas = Math.ceil(totalElementos / elementosPorPagina);  // Usamos Math.ceil para redondear hacia arriba y asegurarnos de mostrar todas las p√°ginas

    // Creamos un bot√≥n de paginaci√≥n por cada p√°gina
    for (let i = 1; i <= totalPaginas; i++) {
        const boton = document.createElement("button");  // Creamos un bot√≥n para cada n√∫mero de p√°gina
        boton.innerText = i;  // El texto del bot√≥n ser√° el n√∫mero de la p√°gina
        if (i === paginaAct) {  // Si el n√∫mero de la p√°gina es el actual, lo marcamos como activo
            boton.classList.add("activo");  // Agregamos una clase "activo" para destacar la p√°gina actual
        }
        // Agregamos un evento al bot√≥n para cambiar la p√°gina cuando se hace clic
        boton.addEventListener("click", () => {
            paginaActual = i;  // Actualizamos la p√°gina actual al hacer clic en el bot√≥n
            mostrarSue√±os(sue√±osFiltrados, paginaActual);  // Volvemos a renderizar los sue√±os en la nueva p√°gina
        });
        contenedor.appendChild(boton);  // Agregamos el bot√≥n al contenedor de la paginaci√≥n
    }
}

// Buscador de sue√±os
const inputBusqueda = document.querySelector("#search-input");  // Seleccionamos el campo de b√∫squeda
let sue√±osFiltrados = [...sue√±os];  // Hacemos una copia del array de sue√±os para filtrarlos seg√∫n la b√∫squeda

// Agregamos un evento para realizar la b√∫squeda cuando el usuario escribe
inputBusqueda.addEventListener("input", () => {
    const texto = inputBusqueda.value.toLowerCase();  // Obtenemos el valor del campo de b√∫squeda en min√∫sculas
    sue√±osFiltrados = sue√±os.filter(s => s.nombre.toLowerCase().includes(texto));  // Filtramos los sue√±os que contienen el texto de la b√∫squeda
    paginaActual = 1;  // Reiniciamos la p√°gina a la 1 cada vez que se realice una nueva b√∫squeda
    mostrarSue√±os(sue√±osFiltrados, paginaActual);  // Volvemos a renderizar los sue√±os filtrados en la primera p√°gina
});

// Mostrar sue√±os al cargar la p√°gina
document.addEventListener("DOMContentLoaded", () => {
    mostrarSue√±os(sue√±osFiltrados, paginaActual);  // Al cargar la p√°gina, mostramos los sue√±os en la primera p√°gina
});

